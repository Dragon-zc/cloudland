// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remotexec.proto

#include "remotexec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace com {
namespace ibm {
namespace cloudland {
namespace scripts {
class ExecuteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteRequest> _instance;
} _ExecuteRequest_default_instance_;
class ExecuteReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteReply> _instance;
} _ExecuteReply_default_instance_;
class FileChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileChunk> _instance;
} _FileChunk_default_instance_;
class TransmitAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransmitAck> _instance;
} _TransmitAck_default_instance_;
}  // namespace scripts
}  // namespace cloudland
}  // namespace ibm
}  // namespace com
static void InitDefaultsExecuteRequest_remotexec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::ibm::cloudland::scripts::_ExecuteRequest_default_instance_;
    new (ptr) ::com::ibm::cloudland::scripts::ExecuteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::ibm::cloudland::scripts::ExecuteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecuteRequest_remotexec_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecuteRequest_remotexec_2eproto}, {}};

static void InitDefaultsExecuteReply_remotexec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::ibm::cloudland::scripts::_ExecuteReply_default_instance_;
    new (ptr) ::com::ibm::cloudland::scripts::ExecuteReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::ibm::cloudland::scripts::ExecuteReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExecuteReply_remotexec_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExecuteReply_remotexec_2eproto}, {}};

static void InitDefaultsFileChunk_remotexec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::ibm::cloudland::scripts::_FileChunk_default_instance_;
    new (ptr) ::com::ibm::cloudland::scripts::FileChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::ibm::cloudland::scripts::FileChunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileChunk_remotexec_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileChunk_remotexec_2eproto}, {}};

static void InitDefaultsTransmitAck_remotexec_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::ibm::cloudland::scripts::_TransmitAck_default_instance_;
    new (ptr) ::com::ibm::cloudland::scripts::TransmitAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::ibm::cloudland::scripts::TransmitAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransmitAck_remotexec_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransmitAck_remotexec_2eproto}, {}};

void InitDefaults_remotexec_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ExecuteRequest_remotexec_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecuteReply_remotexec_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileChunk_remotexec_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransmitAck_remotexec_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_remotexec_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_remotexec_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_remotexec_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_remotexec_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::ExecuteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::ExecuteRequest, id_),
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::ExecuteRequest, control_),
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::ExecuteRequest, command_),
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::ExecuteRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::ExecuteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::ExecuteReply, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::FileChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::FileChunk, id_),
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::FileChunk, control_),
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::FileChunk, filepath_),
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::FileChunk, filesize_),
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::FileChunk, checksum_),
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::FileChunk, fileseek_),
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::FileChunk, content_),
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::FileChunk, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::TransmitAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::ibm::cloudland::scripts::TransmitAck, status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::ibm::cloudland::scripts::ExecuteRequest)},
  { 9, -1, sizeof(::com::ibm::cloudland::scripts::ExecuteReply)},
  { 15, -1, sizeof(::com::ibm::cloudland::scripts::FileChunk)},
  { 28, -1, sizeof(::com::ibm::cloudland::scripts::TransmitAck)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::ibm::cloudland::scripts::_ExecuteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::ibm::cloudland::scripts::_ExecuteReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::ibm::cloudland::scripts::_FileChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::ibm::cloudland::scripts::_TransmitAck_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_remotexec_2eproto = {
  {}, AddDescriptors_remotexec_2eproto, "remotexec.proto", schemas,
  file_default_instances, TableStruct_remotexec_2eproto::offsets,
  file_level_metadata_remotexec_2eproto, 4, file_level_enum_descriptors_remotexec_2eproto, file_level_service_descriptors_remotexec_2eproto,
};

const char descriptor_table_protodef_remotexec_2eproto[] =
  "\n\017remotexec.proto\022\031com.ibm.cloudland.scr"
  "ipts\"M\n\016ExecuteRequest\022\n\n\002id\030\001 \001(\005\022\017\n\007co"
  "ntrol\030\002 \001(\t\022\017\n\007command\030\003 \001(\t\022\r\n\005extra\030\004 "
  "\001(\005\"\036\n\014ExecuteReply\022\016\n\006status\030\001 \001(\t\"\220\001\n\t"
  "FileChunk\022\n\n\002id\030\001 \001(\005\022\017\n\007control\030\002 \001(\t\022\020"
  "\n\010filepath\030\003 \001(\t\022\020\n\010filesize\030\004 \001(\005\022\020\n\010ch"
  "ecksum\030\005 \001(\005\022\020\n\010fileseek\030\006 \001(\003\022\017\n\007conten"
  "t\030\007 \001(\014\022\r\n\005extra\030\010 \001(\005\"\035\n\013TransmitAck\022\016\n"
  "\006status\030\001 \001(\t2\313\001\n\nRemoteExec\022_\n\007Execute\022"
  ").com.ibm.cloudland.scripts.ExecuteReque"
  "st\032\'.com.ibm.cloudland.scripts.ExecuteRe"
  "ply\"\000\022\\\n\010Transmit\022$.com.ibm.cloudland.sc"
  "ripts.FileChunk\032&.com.ibm.cloudland.scri"
  "pts.TransmitAck\"\000(\001B\tZ\007scriptsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_remotexec_2eproto = {
  false, InitDefaults_remotexec_2eproto, 
  descriptor_table_protodef_remotexec_2eproto,
  "remotexec.proto", &assign_descriptors_table_remotexec_2eproto, 558,
};

void AddDescriptors_remotexec_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_remotexec_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_remotexec_2eproto = []() { AddDescriptors_remotexec_2eproto(); return true; }();
namespace com {
namespace ibm {
namespace cloudland {
namespace scripts {

// ===================================================================

void ExecuteRequest::InitAsDefaultInstance() {
}
class ExecuteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteRequest::kIdFieldNumber;
const int ExecuteRequest::kControlFieldNumber;
const int ExecuteRequest::kCommandFieldNumber;
const int ExecuteRequest::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteRequest::ExecuteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.ibm.cloudland.scripts.ExecuteRequest)
}
ExecuteRequest::ExecuteRequest(const ExecuteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  control_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.control().size() > 0) {
    control_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.control_);
  }
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.command().size() > 0) {
    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&id_)) + sizeof(extra_));
  // @@protoc_insertion_point(copy_constructor:com.ibm.cloudland.scripts.ExecuteRequest)
}

void ExecuteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecuteRequest_remotexec_2eproto.base);
  control_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_) -
      reinterpret_cast<char*>(&id_)) + sizeof(extra_));
}

ExecuteRequest::~ExecuteRequest() {
  // @@protoc_insertion_point(destructor:com.ibm.cloudland.scripts.ExecuteRequest)
  SharedDtor();
}

void ExecuteRequest::SharedDtor() {
  control_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExecuteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecuteRequest& ExecuteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecuteRequest_remotexec_2eproto.base);
  return *internal_default_instance();
}


void ExecuteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.ibm.cloudland.scripts.ExecuteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_) -
      reinterpret_cast<char*>(&id_)) + sizeof(extra_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecuteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecuteRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string control = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.ibm.cloudland.scripts.ExecuteRequest.control");
        object = msg->mutable_control();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string command = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.ibm.cloudland.scripts.ExecuteRequest.command");
        object = msg->mutable_command();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 extra = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_extra(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecuteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.ibm.cloudland.scripts.ExecuteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string control = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_control()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->control().data(), static_cast<int>(this->control().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.ibm.cloudland.scripts.ExecuteRequest.control"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string command = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->command().data(), static_cast<int>(this->command().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.ibm.cloudland.scripts.ExecuteRequest.command"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 extra = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.ibm.cloudland.scripts.ExecuteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.ibm.cloudland.scripts.ExecuteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecuteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.ibm.cloudland.scripts.ExecuteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string control = 2;
  if (this->control().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->control().data(), static_cast<int>(this->control().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.ExecuteRequest.control");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->control(), output);
  }

  // string command = 3;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), static_cast<int>(this->command().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.ExecuteRequest.command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->command(), output);
  }

  // int32 extra = 4;
  if (this->extra() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->extra(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.ibm.cloudland.scripts.ExecuteRequest)
}

::google::protobuf::uint8* ExecuteRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.ibm.cloudland.scripts.ExecuteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string control = 2;
  if (this->control().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->control().data(), static_cast<int>(this->control().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.ExecuteRequest.control");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->control(), target);
  }

  // string command = 3;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), static_cast<int>(this->command().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.ExecuteRequest.command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->command(), target);
  }

  // int32 extra = 4;
  if (this->extra() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->extra(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.ibm.cloudland.scripts.ExecuteRequest)
  return target;
}

size_t ExecuteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.ibm.cloudland.scripts.ExecuteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string control = 2;
  if (this->control().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->control());
  }

  // string command = 3;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 extra = 4;
  if (this->extra() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->extra());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.ibm.cloudland.scripts.ExecuteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ExecuteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.ibm.cloudland.scripts.ExecuteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.ibm.cloudland.scripts.ExecuteRequest)
    MergeFrom(*source);
  }
}

void ExecuteRequest::MergeFrom(const ExecuteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.ibm.cloudland.scripts.ExecuteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.control().size() > 0) {

    control_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.control_);
  }
  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.extra() != 0) {
    set_extra(from.extra());
  }
}

void ExecuteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.ibm.cloudland.scripts.ExecuteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteRequest::CopyFrom(const ExecuteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.ibm.cloudland.scripts.ExecuteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteRequest::IsInitialized() const {
  return true;
}

void ExecuteRequest::Swap(ExecuteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteRequest::InternalSwap(ExecuteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  control_.Swap(&other->control_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  command_.Swap(&other->command_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(extra_, other->extra_);
}

::google::protobuf::Metadata ExecuteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remotexec_2eproto);
  return ::file_level_metadata_remotexec_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecuteReply::InitAsDefaultInstance() {
}
class ExecuteReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteReply::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteReply::ExecuteReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.ibm.cloudland.scripts.ExecuteReply)
}
ExecuteReply::ExecuteReply(const ExecuteReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:com.ibm.cloudland.scripts.ExecuteReply)
}

void ExecuteReply::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecuteReply_remotexec_2eproto.base);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExecuteReply::~ExecuteReply() {
  // @@protoc_insertion_point(destructor:com.ibm.cloudland.scripts.ExecuteReply)
  SharedDtor();
}

void ExecuteReply::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExecuteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecuteReply& ExecuteReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecuteReply_remotexec_2eproto.base);
  return *internal_default_instance();
}


void ExecuteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.ibm.cloudland.scripts.ExecuteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecuteReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecuteReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.ibm.cloudland.scripts.ExecuteReply.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecuteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.ibm.cloudland.scripts.ExecuteReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.ibm.cloudland.scripts.ExecuteReply.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.ibm.cloudland.scripts.ExecuteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.ibm.cloudland.scripts.ExecuteReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecuteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.ibm.cloudland.scripts.ExecuteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.ExecuteReply.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.ibm.cloudland.scripts.ExecuteReply)
}

::google::protobuf::uint8* ExecuteReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.ibm.cloudland.scripts.ExecuteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.ExecuteReply.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.ibm.cloudland.scripts.ExecuteReply)
  return target;
}

size_t ExecuteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.ibm.cloudland.scripts.ExecuteReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.ibm.cloudland.scripts.ExecuteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteReply* source =
      ::google::protobuf::DynamicCastToGenerated<ExecuteReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.ibm.cloudland.scripts.ExecuteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.ibm.cloudland.scripts.ExecuteReply)
    MergeFrom(*source);
  }
}

void ExecuteReply::MergeFrom(const ExecuteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.ibm.cloudland.scripts.ExecuteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void ExecuteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.ibm.cloudland.scripts.ExecuteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteReply::CopyFrom(const ExecuteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.ibm.cloudland.scripts.ExecuteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteReply::IsInitialized() const {
  return true;
}

void ExecuteReply::Swap(ExecuteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteReply::InternalSwap(ExecuteReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ExecuteReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remotexec_2eproto);
  return ::file_level_metadata_remotexec_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileChunk::InitAsDefaultInstance() {
}
class FileChunk::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileChunk::kIdFieldNumber;
const int FileChunk::kControlFieldNumber;
const int FileChunk::kFilepathFieldNumber;
const int FileChunk::kFilesizeFieldNumber;
const int FileChunk::kChecksumFieldNumber;
const int FileChunk::kFileseekFieldNumber;
const int FileChunk::kContentFieldNumber;
const int FileChunk::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileChunk::FileChunk()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.ibm.cloudland.scripts.FileChunk)
}
FileChunk::FileChunk(const FileChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  control_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.control().size() > 0) {
    control_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.control_);
  }
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filepath().size() > 0) {
    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&id_)) + sizeof(extra_));
  // @@protoc_insertion_point(copy_constructor:com.ibm.cloudland.scripts.FileChunk)
}

void FileChunk::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileChunk_remotexec_2eproto.base);
  control_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_) -
      reinterpret_cast<char*>(&id_)) + sizeof(extra_));
}

FileChunk::~FileChunk() {
  // @@protoc_insertion_point(destructor:com.ibm.cloudland.scripts.FileChunk)
  SharedDtor();
}

void FileChunk::SharedDtor() {
  control_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileChunk& FileChunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileChunk_remotexec_2eproto.base);
  return *internal_default_instance();
}


void FileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:com.ibm.cloudland.scripts.FileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_) -
      reinterpret_cast<char*>(&id_)) + sizeof(extra_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileChunk::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileChunk*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string control = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.ibm.cloudland.scripts.FileChunk.control");
        object = msg->mutable_control();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filepath = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.ibm.cloudland.scripts.FileChunk.filepath");
        object = msg->mutable_filepath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 filesize = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_filesize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 checksum = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_checksum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 fileseek = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_fileseek(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes content = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_content();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 extra = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_extra(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.ibm.cloudland.scripts.FileChunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string control = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_control()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->control().data(), static_cast<int>(this->control().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.ibm.cloudland.scripts.FileChunk.control"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filepath = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filepath().data(), static_cast<int>(this->filepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.ibm.cloudland.scripts.FileChunk.filepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 filesize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 checksum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fileseek = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fileseek_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 extra = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.ibm.cloudland.scripts.FileChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.ibm.cloudland.scripts.FileChunk)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.ibm.cloudland.scripts.FileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string control = 2;
  if (this->control().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->control().data(), static_cast<int>(this->control().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.FileChunk.control");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->control(), output);
  }

  // string filepath = 3;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.FileChunk.filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filepath(), output);
  }

  // int32 filesize = 4;
  if (this->filesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->filesize(), output);
  }

  // int32 checksum = 5;
  if (this->checksum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->checksum(), output);
  }

  // int64 fileseek = 6;
  if (this->fileseek() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fileseek(), output);
  }

  // bytes content = 7;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->content(), output);
  }

  // int32 extra = 8;
  if (this->extra() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->extra(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.ibm.cloudland.scripts.FileChunk)
}

::google::protobuf::uint8* FileChunk::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.ibm.cloudland.scripts.FileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string control = 2;
  if (this->control().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->control().data(), static_cast<int>(this->control().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.FileChunk.control");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->control(), target);
  }

  // string filepath = 3;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), static_cast<int>(this->filepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.FileChunk.filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filepath(), target);
  }

  // int32 filesize = 4;
  if (this->filesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->filesize(), target);
  }

  // int32 checksum = 5;
  if (this->checksum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->checksum(), target);
  }

  // int64 fileseek = 6;
  if (this->fileseek() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fileseek(), target);
  }

  // bytes content = 7;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->content(), target);
  }

  // int32 extra = 8;
  if (this->extra() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->extra(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.ibm.cloudland.scripts.FileChunk)
  return target;
}

size_t FileChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.ibm.cloudland.scripts.FileChunk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string control = 2;
  if (this->control().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->control());
  }

  // string filepath = 3;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filepath());
  }

  // bytes content = 7;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 filesize = 4;
  if (this->filesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->filesize());
  }

  // int64 fileseek = 6;
  if (this->fileseek() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fileseek());
  }

  // int32 checksum = 5;
  if (this->checksum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checksum());
  }

  // int32 extra = 8;
  if (this->extra() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->extra());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.ibm.cloudland.scripts.FileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const FileChunk* source =
      ::google::protobuf::DynamicCastToGenerated<FileChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.ibm.cloudland.scripts.FileChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.ibm.cloudland.scripts.FileChunk)
    MergeFrom(*source);
  }
}

void FileChunk::MergeFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.ibm.cloudland.scripts.FileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.control().size() > 0) {

    control_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.control_);
  }
  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.filesize() != 0) {
    set_filesize(from.filesize());
  }
  if (from.fileseek() != 0) {
    set_fileseek(from.fileseek());
  }
  if (from.checksum() != 0) {
    set_checksum(from.checksum());
  }
  if (from.extra() != 0) {
    set_extra(from.extra());
  }
}

void FileChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.ibm.cloudland.scripts.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileChunk::CopyFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.ibm.cloudland.scripts.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileChunk::IsInitialized() const {
  return true;
}

void FileChunk::Swap(FileChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileChunk::InternalSwap(FileChunk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  control_.Swap(&other->control_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filepath_.Swap(&other->filepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(filesize_, other->filesize_);
  swap(fileseek_, other->fileseek_);
  swap(checksum_, other->checksum_);
  swap(extra_, other->extra_);
}

::google::protobuf::Metadata FileChunk::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remotexec_2eproto);
  return ::file_level_metadata_remotexec_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransmitAck::InitAsDefaultInstance() {
}
class TransmitAck::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransmitAck::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransmitAck::TransmitAck()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.ibm.cloudland.scripts.TransmitAck)
}
TransmitAck::TransmitAck(const TransmitAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:com.ibm.cloudland.scripts.TransmitAck)
}

void TransmitAck::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransmitAck_remotexec_2eproto.base);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TransmitAck::~TransmitAck() {
  // @@protoc_insertion_point(destructor:com.ibm.cloudland.scripts.TransmitAck)
  SharedDtor();
}

void TransmitAck::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransmitAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransmitAck& TransmitAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransmitAck_remotexec_2eproto.base);
  return *internal_default_instance();
}


void TransmitAck::Clear() {
// @@protoc_insertion_point(message_clear_start:com.ibm.cloudland.scripts.TransmitAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransmitAck::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransmitAck*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.ibm.cloudland.scripts.TransmitAck.status");
        object = msg->mutable_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransmitAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.ibm.cloudland.scripts.TransmitAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.ibm.cloudland.scripts.TransmitAck.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.ibm.cloudland.scripts.TransmitAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.ibm.cloudland.scripts.TransmitAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransmitAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.ibm.cloudland.scripts.TransmitAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.TransmitAck.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.ibm.cloudland.scripts.TransmitAck)
}

::google::protobuf::uint8* TransmitAck::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.ibm.cloudland.scripts.TransmitAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.ibm.cloudland.scripts.TransmitAck.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.ibm.cloudland.scripts.TransmitAck)
  return target;
}

size_t TransmitAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.ibm.cloudland.scripts.TransmitAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransmitAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.ibm.cloudland.scripts.TransmitAck)
  GOOGLE_DCHECK_NE(&from, this);
  const TransmitAck* source =
      ::google::protobuf::DynamicCastToGenerated<TransmitAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.ibm.cloudland.scripts.TransmitAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.ibm.cloudland.scripts.TransmitAck)
    MergeFrom(*source);
  }
}

void TransmitAck::MergeFrom(const TransmitAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.ibm.cloudland.scripts.TransmitAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void TransmitAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.ibm.cloudland.scripts.TransmitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitAck::CopyFrom(const TransmitAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.ibm.cloudland.scripts.TransmitAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitAck::IsInitialized() const {
  return true;
}

void TransmitAck::Swap(TransmitAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransmitAck::InternalSwap(TransmitAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TransmitAck::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remotexec_2eproto);
  return ::file_level_metadata_remotexec_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace scripts
}  // namespace cloudland
}  // namespace ibm
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::ibm::cloudland::scripts::ExecuteRequest* Arena::CreateMaybeMessage< ::com::ibm::cloudland::scripts::ExecuteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::ibm::cloudland::scripts::ExecuteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::ibm::cloudland::scripts::ExecuteReply* Arena::CreateMaybeMessage< ::com::ibm::cloudland::scripts::ExecuteReply >(Arena* arena) {
  return Arena::CreateInternal< ::com::ibm::cloudland::scripts::ExecuteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::ibm::cloudland::scripts::FileChunk* Arena::CreateMaybeMessage< ::com::ibm::cloudland::scripts::FileChunk >(Arena* arena) {
  return Arena::CreateInternal< ::com::ibm::cloudland::scripts::FileChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::com::ibm::cloudland::scripts::TransmitAck* Arena::CreateMaybeMessage< ::com::ibm::cloudland::scripts::TransmitAck >(Arena* arena) {
  return Arena::CreateInternal< ::com::ibm::cloudland::scripts::TransmitAck >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
